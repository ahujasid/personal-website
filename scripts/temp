<!-- 
		<script id="texture_vertex_simulation_shader" type="x-shader/x-vertex">
				
			varying vec2 vUv;

			void main() {

				vUv = vec2(uv.x, 1.0 - uv.y);
				gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

			}

		</script>
		<script id="texture_fragment_simulation_shader" type="x-shader/x-fragment">
				
			// simulation
			varying vec2 vUv;
			
			uniform vec3 origin;
			uniform sampler2D tPositions;
			
			uniform float timer;


			float rand(vec2 co){
			    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
			}
		
			void main() {


				vec3 pos = texture2D( tPositions, vUv ).xyz;

				if ( rand( vUv + timer ) > 0.99 ) {

					pos = origin;

					vec3 random = vec3( rand( vUv + 1.0 ) - 1.0, rand( vUv + 2.0 ) - 1.0, rand( vUv + 3.0 ) - 1.0 );
					pos += normalize( random ) * rand( vUv + 1.0 );

				} else {

					float x = pos.x + timer;
					float y = pos.y;
					float z = pos.z;

					pos.x += sin( y * 3.3 ) * cos( z * 10.3 ) * 0.005;
					pos.y += sin( x * 3.5 ) * cos( z * 10.5 ) * 0.005;
					pos.z += sin( x * 3.7 ) * cos( y * 10.7 ) * 0.005;

				}


				// Write new position out
				gl_FragColor = vec4(pos, 1.0);


			}


		</script>


		<script id="vs-particles" type="x-shader/x-vertex">

			uniform sampler2D map;

			uniform float width;
			uniform float height;

			uniform float pointSize;

			varying vec2 vUv;
			varying vec4 vPosition;
			varying vec4 vColor;

			void main() {

				vec2 uv = position.xy + vec2( 0.5 / width, 0.5 / height );
				vec3 color = texture2D( map, uv ).rgb * 200.0 - 100.0;

				gl_PointSize = pointSize;
				gl_Position = projectionMatrix * modelViewMatrix * vec4( color, 1.0 );

			}

		</script>

		<script id="fs-particles" type="x-shader/x-fragment">

			uniform vec4 pointColor;

			void main() {

				gl_FragColor = pointColor;

			}

		</script> -->